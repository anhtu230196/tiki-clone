{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\tiki\\\\admin-app\\\\src\\\\container\\\\Category\\\\Category.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, Col, Container, Modal, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addCategory, getAllCategory } from '../../actions/category.action';\nimport Layout from '../../components/Layout/Layout';\nimport Input from '../../components/UI/Input/Input';\nimport MyModal from '../../components/UI/Modal/MyModal';\nimport CheckboxTree from 'react-checkbox-tree';\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\nimport { IoIosCheckboxOutline, IoIosCheckbox, IoIosArrowForward, IoIosArrowDown } from 'react-icons/io';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Category() {\n  _s();\n\n  const category = useSelector(state => state.category);\n  const [show, setShow] = useState(false);\n  const [categoryName, setCategoryName] = useState('');\n  const [parentCategoryId, setParentCategoryId] = useState('');\n  const [categoryImage, setCategoryImage] = useState('');\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [checkedArray, setCheckedArray] = useState([]);\n  const [expandedArray, setExpandedArray] = useState([]);\n  const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\n  const dispatch = useDispatch();\n\n  const renderCategories = categories => {\n    let myCategories = [];\n    categories.forEach(category => {\n      myCategories.push({\n        label: category.name,\n        value: category._id,\n        children: category.children.length > 0 && renderCategories(category.children)\n      });\n    });\n    return myCategories;\n  };\n\n  const createCategoryList = (categories, options = []) => {\n    for (let category of categories) {\n      options.push({\n        value: category._id,\n        name: category.name\n      });\n\n      if (category.children.length > 0) {\n        createCategoryList(category.children, options);\n      }\n    }\n\n    return options;\n  };\n\n  const handleCategoryImage = e => {\n    setCategoryImage(e.target.files[0]);\n  };\n\n  const handleClose = () => {\n    const form = new FormData();\n    form.append('name', categoryName);\n    form.append('parentId', parentCategoryId);\n    form.append('categoryImage', categoryImage);\n    dispatch(addCategory(form));\n    setShow(false);\n  };\n\n  const handleShow = () => setShow(true);\n\n  const updateCategory = () => {\n    setUpdateCategoryModal(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: 12,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: handleShow,\n            children: \"Add New Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: 12,\n          children: /*#__PURE__*/_jsxDEV(CheckboxTree, {\n            nodes: renderCategories(category.categories),\n            checked: checked,\n            expanded: expanded,\n            onCheck: checked => setChecked(checked),\n            onExpand: expanded => setExpanded(expanded),\n            icons: {\n              check: /*#__PURE__*/_jsxDEV(IoIosCheckbox, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 40\n              }, this),\n              uncheck: /*#__PURE__*/_jsxDEV(IoIosCheckboxOutline, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 42\n              }, this),\n              halfCheck: /*#__PURE__*/_jsxDEV(IoIosCheckboxOutline, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 44\n              }, this),\n              expandClose: /*#__PURE__*/_jsxDEV(IoIosArrowForward, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 46\n              }, this),\n              expandOpen: /*#__PURE__*/_jsxDEV(IoIosArrowDown, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 45\n              }, this)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: updateCategory,\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MyModal, {\n      modalTitle: \"Add Category\",\n      show: show,\n      handleClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        value: categoryName,\n        placeholder: \"Category Name\",\n        onChange: e => setCategoryName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"form-control\",\n        value: parentCategoryId,\n        onChange: e => setParentCategoryId(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"select category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), createCategoryList(category.categories).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option.value,\n          children: option.name\n        }, option.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"categoryImage\",\n        onChange: handleCategoryImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MyModal, {\n      modalTitle: \"Update Category\",\n      show: updateCategoryModal,\n      handleClose: () => setUpdateCategoryModal(false),\n      size: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            value: categoryName,\n            placeholder: \"Category Name\",\n            onChange: e => setCategoryName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: parentCategoryId,\n            onChange: e => setParentCategoryId(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"select category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this), createCategoryList(category.categories).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              children: option.name\n            }, option.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 37\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"store\",\n              children: \"Store\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"product\",\n              children: \"Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"page\",\n              children: \"Page\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"categoryImage\",\n        onChange: handleCategoryImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Category, \"WZ/bLI1sOa/pfXMozBAeIWlOH6I=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Category;\nexport default Category;\n\nvar _c;\n\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"sources":["C:/Users/Admin/Documents/tiki/admin-app/src/container/Category/Category.jsx"],"names":["React","useEffect","useState","Button","Col","Container","Modal","Row","useDispatch","useSelector","addCategory","getAllCategory","Layout","Input","MyModal","CheckboxTree","IoIosCheckboxOutline","IoIosCheckbox","IoIosArrowForward","IoIosArrowDown","Category","category","state","show","setShow","categoryName","setCategoryName","parentCategoryId","setParentCategoryId","categoryImage","setCategoryImage","checked","setChecked","expanded","setExpanded","checkedArray","setCheckedArray","expandedArray","setExpandedArray","updateCategoryModal","setUpdateCategoryModal","dispatch","renderCategories","categories","myCategories","forEach","push","label","name","value","_id","children","length","createCategoryList","options","handleCategoryImage","e","target","files","handleClose","form","FormData","append","handleShow","updateCategory","check","uncheck","halfCheck","expandClose","expandOpen","map","option"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Button, Col, Container, Modal, Row } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addCategory, getAllCategory } from '../../actions/category.action'\r\nimport Layout from '../../components/Layout/Layout'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport MyModal from '../../components/UI/Modal/MyModal'\r\nimport CheckboxTree from 'react-checkbox-tree'\r\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\"\r\nimport {\r\n    IoIosCheckboxOutline,\r\n    IoIosCheckbox,\r\n    IoIosArrowForward,\r\n    IoIosArrowDown\r\n} from 'react-icons/io'\r\n\r\nfunction Category() {\r\n    const category = useSelector(state => state.category)\r\n    const [show, setShow] = useState(false);\r\n    const [categoryName, setCategoryName] = useState('')\r\n    const [parentCategoryId, setParentCategoryId] = useState('')\r\n    const [categoryImage, setCategoryImage] = useState('')\r\n    const [checked, setChecked] = useState([])\r\n    const [expanded, setExpanded] = useState([])\r\n    const [checkedArray, setCheckedArray] = useState([])\r\n    const [expandedArray, setExpandedArray] = useState([])\r\n    const [updateCategoryModal, setUpdateCategoryModal] = useState(false)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const renderCategories = (categories) => {\r\n        let myCategories = []\r\n        categories.forEach(category => {\r\n            myCategories.push(\r\n                {\r\n                    label: category.name,\r\n                    value: category._id,\r\n                    children: category.children.length > 0 && renderCategories(category.children)\r\n                }\r\n            )\r\n        });\r\n        return myCategories\r\n    }\r\n\r\n    const createCategoryList = (categories, options = []) => {\r\n        for (let category of categories) {\r\n            options.push({ value: category._id, name: category.name })\r\n            if (category.children.length > 0) {\r\n                createCategoryList(category.children, options)\r\n            }\r\n        }\r\n        return options\r\n    }\r\n\r\n    const handleCategoryImage = (e) => {\r\n        setCategoryImage(e.target.files[0])\r\n    }\r\n\r\n    const handleClose = () => {\r\n        const form = new FormData()\r\n        form.append('name', categoryName)\r\n        form.append('parentId', parentCategoryId)\r\n        form.append('categoryImage', categoryImage)\r\n        dispatch(addCategory(form))\r\n        setShow(false)\r\n    };\r\n    const handleShow = () => setShow(true);\r\n\r\n    const updateCategory = () => {\r\n        setUpdateCategoryModal(true)\r\n    }\r\n    return (\r\n        <Layout>\r\n            <Container>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <h3>Category</h3>\r\n                        <Button variant=\"primary\" onClick={handleShow}>\r\n                            Add New Category\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <CheckboxTree\r\n                            nodes={renderCategories(category.categories)}\r\n                            checked={checked}\r\n                            expanded={expanded}\r\n                            onCheck={checked => setChecked(checked)}\r\n                            onExpand={expanded => setExpanded(expanded)}\r\n                            icons={{\r\n                                check: <IoIosCheckbox />,\r\n                                uncheck: <IoIosCheckboxOutline />,\r\n                                halfCheck: <IoIosCheckboxOutline />,\r\n                                expandClose: <IoIosArrowForward />,\r\n                                expandOpen: <IoIosArrowDown />\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <button>Delete</button>\r\n                        <button onClick={updateCategory}>Update</button>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n            <MyModal\r\n                modalTitle=\"Add Category\"\r\n                show={show}\r\n                handleClose={handleClose}\r\n            >\r\n                <Input\r\n                    value={categoryName}\r\n                    placeholder={\"Category Name\"}\r\n                    onChange={e => setCategoryName(e.target.value)}\r\n                />\r\n\r\n                <select\r\n                    className=\"form-control\"\r\n                    value={parentCategoryId}\r\n                    onChange={(e) => setParentCategoryId(e.target.value)}\r\n                >\r\n                    <option value=\"\">select category</option>\r\n                    {\r\n                        createCategoryList(category.categories).map(option =>\r\n                            <option key={option.value} value={option.value}>{option.name}</option>)\r\n                    }\r\n                </select>\r\n\r\n                <input type=\"file\" name=\"categoryImage\" onChange={handleCategoryImage} />\r\n            </MyModal>\r\n\r\n            {/* Edit Category */}\r\n            <MyModal\r\n                modalTitle=\"Update Category\"\r\n                show={updateCategoryModal}\r\n                handleClose={() => setUpdateCategoryModal(false)}\r\n                size=\"lg\"\r\n            >\r\n                <Row>\r\n                    <Col>\r\n                        <Input\r\n                            value={categoryName}\r\n                            placeholder={\"Category Name\"}\r\n                            onChange={e => setCategoryName(e.target.value)}\r\n                        />\r\n                    </Col>\r\n                    <Col>\r\n                        <select\r\n                            className=\"form-control\"\r\n                            value={parentCategoryId}\r\n                            onChange={(e) => setParentCategoryId(e.target.value)}\r\n                        >\r\n                            <option value=\"\">select category</option>\r\n                            {\r\n                                createCategoryList(category.categories).map(option =>\r\n                                    <option key={option.value} value={option.value}>{option.name}</option>)\r\n                            }\r\n                        </select>\r\n                    </Col>\r\n                    <Col>\r\n                        <select>\r\n                            <option value=\"\">Select Type</option>\r\n                            <option value=\"store\">Store</option>\r\n                            <option value=\"product\">Product</option>\r\n                            <option value=\"page\">Page</option>\r\n                        </select>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <input type=\"file\" name=\"categoryImage\" onChange={handleCategoryImage} />\r\n            </MyModal>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default Category\r\n"]},"metadata":{},"sourceType":"module"}